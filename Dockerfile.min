FROM python:3.13.5-slim

LABEL maintainer="you@example.com"
LABEL description="yamlx workflow CLI tool - core only"

WORKDIR /app

# C√†i h·ªá th·ªëng & pip packages
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    build-essential curl \
# && pip install --no-cache-dir pyyaml requests jinja2 \
# && rm -rf /var/lib/apt/lists/*

# T·∫°o project structure
RUN mkdir -p /app/yamlx/actions && \
    touch /app/yamlx/__init__.py && \
    touch /app/yamlx/actions/__init__.py

# registry.py
RUN cat <<EOF > /app/yamlx/registry.py
ACTION_REGISTRY = {}
def register(name):
    def wrapper(func):
        ACTION_REGISTRY[name] = func
        return func
    return wrapper
def get_action(name):
    return ACTION_REGISTRY.get(name)
EOF

# core.py
RUN cat <<EOF > /app/yamlx/core.py
import yaml, importlib, os
from jinja2 import Template
from yamlx.registry import get_action
def render(value):
    return Template(value).render(env=os.environ)
def load_actions():
    path = os.path.join(os.path.dirname(__file__), "actions")
    for f in os.listdir(path):
        if f.endswith(".py") and not f.startswith("_"):
            importlib.import_module(f"yamlx.actions." + f[:-3])
def execute_yaml(file_path):
    load_actions()
    with open(file_path, "r") as f:
        data = yaml.safe_load(f)
    print("\\nüìÑ", data.get("metadata", {}).get("title", "yamlx script"))
    print("="*40)
    for task in data.get("tasks", []):
        action = task.get("action")
        fn = get_action(action)
        if fn:
            try:
                fn(task)
            except Exception as e:
                print(f"‚ùå L·ªói v·ªõi action '{action}': {e}")
        else:
            print(f"‚ö†Ô∏è Action kh√¥ng h·ªó tr·ª£: {action}")
EOF

# cli.py
RUN cat <<EOF > /app/yamlx/cli.py
import argparse, os, sys
from yamlx.core import execute_yaml
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("yaml_file", help="Path to YAML script")
    args = parser.parse_args()
    if not os.path.exists(args.yaml_file):
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {args.yaml_file}")
        sys.exit(1)
    execute_yaml(args.yaml_file)
EOF

# setup.py (ƒë√£ s·ª≠a version h·ª£p l·ªá)
RUN cat <<EOF > /app/setup.py
from setuptools import setup, find_packages
setup(
    name="yamlx",
    version="0.1.0",
    packages=find_packages(),
    install_requires=["pyyaml", "requests", "jinja2"],
    entry_points={"console_scripts": ["yamlx = yamlx.cli:main"]},
)
EOF

# Duy nh·∫•t 1 action: print_message
RUN cat <<EOF > /app/yamlx/actions/print_message.py
from yamlx.registry import register
@register("print_message")
def _(task):
    print("[PRINT]", task.get("message"))
EOF

# Sample script
RUN cat <<EOF > /app/example.yaml
metadata:
  title: "üß™ Minimal YAMLX"
tasks:
  - action: print_message
    message: "‚úÖ Hello t·ª´ phi√™n b·∫£n t·ªëi gi·∫£n"
EOF

# C√†i tool & ch·∫°y m·∫∑c ƒë·ªãnh
RUN pip install --no-cache-dir -e /app
ENTRYPOINT ["yamlx"]
CMD ["example.yaml"]

#FROM python:3.11-slim-buster
FROM python:3.14.0b3-alpine3.21

LABEL maintainer="you@example.com"
LABEL description="Unified LogicMap + YAMLX Runtime"

WORKDIR /app
ENV PYTHONPATH=/app

RUN pip install --no-cache-dir pyyaml requests jinja2

# -------------------------
# üß† Unified logic_engine.py
# -------------------------
RUN cat <<EOF > logic_engine.py
import os, yaml, time, importlib, subprocess, base64, tempfile, datetime
from string import Template
from jinja2 import Template as JinjaTemplate # Use alias to avoid conflict
import requests # Import requests here

CONTEXT = {}
ACTION_REGISTRY = {}

def register(name):
    def wrapper(func):
        ACTION_REGISTRY[name] = func
        return func
    return wrapper

def get_action(name):
    return ACTION_REGISTRY.get(name)

# Action: print_message
@register("print_message")
def print_message_action(task):
    msg = render(task.get("message") or CONTEXT.get("message") or CONTEXT.get("item") or "(no message)")
    print("[PRINT]", msg)

# Action: calculate
@register("calculate")
def calculate_action(task):
    op = task.get("operation")
    nums = render(task.get("numbers", []))
    if op == "add":
        print("[CALC] T·ªïng:", sum(nums))
    elif op == "multiply":
        r = 1
        for n in nums: r *= n
        print("[CALC] Nh√¢n:", r)
    else:
        print("[CALC] Kh√¥ng h·ªó tr·ª£:", op)

# Action: run_command
@register("run_command")
def run_command_action(task):
    cmd = render(task.get("command"))
    print("[SHELL] ‚á®", cmd)
    subprocess.run(cmd, shell=True)

# Action: file_write
@register("file_write")
def file_write_action(task):
    filename = render(CONTEXT["filename"])
    content = render(CONTEXT["content"])
    with open(filename, "w") as f:
        f.write(content)
    print("[WRITE] ‚Üí", filename)

# Action: python_execute
@register("python_execute")
def python_execute_action(task):
    print("[PYTHON]")
    try:
        exec(render(task.get("code", "")))
    except Exception as e:
        print("‚ö†Ô∏è Python error:", e)
        raise # Re-raise to allow retry to catch it

# Action: binary_execute
@register("binary_execute")
def binary_execute_action(task):
    code = render(task.get("binary_code", ""))
    if isinstance(code, str):
        code += "=" * ((4 - len(code) % 4) % 4)
        code = base64.b64decode(code)
    with tempfile.NamedTemporaryFile(delete=False) as f:
        f.write(code)
        path = f.name
    os.chmod(path, 0o755)
    print("[BIN] ‚á®", path)
    subprocess.run([path])
    os.remove(path)

# Action: http_request
@register("http_request")
def http_request_action(task):
    method = render(task.get("method", "GET")).upper()
    url = render(task.get("url"))
    print("[HTTP]", method, url)
    res = requests.request(method, url)
    print("[RESP]", res.status_code)
    print(res.text[:200])

# Action: fail
@register("fail")
def fail_action(task):
    raise Exception("üí• Intentional failure")

def load_actions():
    # All actions are now directly defined and registered in this file
    pass # No dynamic loading needed anymore

def load_program(name):
    path = f"./programs/{name}.logicmap"
    if not os.path.exists(path):
        raise FileNotFoundError(f"‚ùå Program not found: {name}")
    with open(path) as f:
        return yaml.safe_load(f)

def render(s):
    if isinstance(s, str):
        return JinjaTemplate(s).render(env=os.environ, datetime=datetime, **CONTEXT)
    return s # Return non-string values as is

def run_step(step):
    if isinstance(step, dict):
        if "loop" in step:
            return handle_loop(step["loop"])
        elif "retry" in step:
            return handle_retry(step["retry"])
        elif "action" in step:
            return handle_action(step)
        elif "set" in step:
            return handle_set(step["set"])
        else:
            keys = list(step.keys())
            if len(keys) == 1:
                return run_program(keys[0], CONTEXT)
            else:
                print(f"‚ö†Ô∏è Kh√¥ng r√µ step: {step}")
    elif isinstance(step, str):
        return run_program(step, CONTEXT)

def handle_set(cfg):
    for k, v in cfg.items():
        CONTEXT[k] = render(v)

def handle_action(task):
    name = task["action"]
    fn = get_action(name)
    if fn:
        try:
            fn(task)
        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi action '{name}': {e}")
            raise # Re-raise to allow retry to catch it
    else:
        print(f"‚ö†Ô∏è Action kh√¥ng h·ªó tr·ª£: {name}")

def handle_loop(cfg):
    items = render(cfg.get("over") or [])
    do = cfg.get("do") or []
    for item in items:
        CONTEXT["item"] = item
        for step in do: run_step(step)

def handle_retry(cfg):
    tries = cfg.get("max_attempts", 1)
    delay = cfg.get("delay_seconds", 0)
    steps = cfg.get("do", [])
    for i in range(tries):
        try:
            for step in steps: run_step(step)
            break
        except Exception as e:
            print(f"[RETRY {i+1}/{tries}] ‚ö†Ô∏è {e}")
            if i < tries - 1: time.sleep(delay)

def run_program(name, args):
    prog = load_program(name)
    print(f"\n‚ñ∂Ô∏è  RUN: {prog.get('program')}")
    CONTEXT.update(args)
    for step in prog.get("process", []): run_step(step)
    for k, v in (prog.get("output") or {}).items():
        CONTEXT[k] = render(v)
    return CONTEXT

if __name__ == "__main__":
    import sys
    # Add the current directory to sys.path to make 'actions' discoverable
    sys.path.append(os.path.dirname(__file__))
    load_actions() # Load actions at startup
    prog = sys.argv[1] if len(sys.argv) > 1 else "main"
    run_program(prog, {})
EOF

# -------------------------
# üì¶ Sample logicmap files
# -------------------------
RUN mkdir programs

# main.logicmap (Unified Demo)
RUN cat <<EOF > programs/main.logicmap
program: Unified Demo

input:
  user_name: string

process:
  - set:
      message: "üëã Hello {{ user_name | default('World') }}"
  - action: print_message

  - action: calculate
    operation: multiply
    numbers: [2, 3, 4, 5]

  - set:
      filename: "unified_output.txt"
      content: "This file was written by the unified engine. Current time: {{ datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S') }}"
  - action: file_write

  - action: run_command
    command: "echo 'Shell command from unified engine. User: {{ env.USER }}'"

  - action: python_execute
    code: |
      print("‚Üí Python code running in unified engine.")
      for i in range(CONTEXT.get('loop_count', 2)):
          print("  Unified loop iteration", i)

  - retry:
      max_attempts: 3
      delay_seconds: 1
      do:
        - action: fail

  - set: { message: "‚úÖ Recovered from failure in unified engine" }
  - action: print_message

  - loop:
      over: ["Unified Item 1", "Unified Item 2"]
      do:
        - set: { message: "üé§ Processing unified item: {{ item }}" }
        - action: print_message
        - action: run_command
          command: "echo 'Processing {{ item }}'"

  - action: http_request
    method: GET
    url: https://httpbin.org/get

  - action: binary_execute
    binary_code: !!binary |
      IyEvYmluL3NoCmVjaG8gIlxu4peEIFVuaWZpZWQgQmluYXJ5IFJ1biBUaW1lISIK
EOF

# -------------------------
# üèÅ Entry point
# -------------------------
ENTRYPOINT ["python", "logic_engine.py"]
CMD ["main"]
